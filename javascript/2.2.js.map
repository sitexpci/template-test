{"version":3,"sources":["webpack:///2.2.js","webpack:///../~/insightmsdn/insight.js"],"names":["webpackJsonp","867","module","exports","__webpack_require__","__WEBPACK_AMD_REQUIRE_ARRAY__","$","window","insight","console","error","customTags","customTagsCount","customTagsBatchSize","debugConsoleLogEnabled","debugLogMsgs","debugLog","inMsg","push","log","getMetaTagContent","inMTName","myMTContent","length","content","e","setMetaTagContent","inMTContent","myMetaTag","document","createElement","name","getElementsByTagName","appendChild","attr","processWEDCSCustomEventFromArray","inArray","MscomCustomEvent","apply","this","wedcsLogTimer","processAllCustomTags","clearTimeout","array","key","undefined","addNewCustomTag","value","setTimeout","setupUnloadTracking","bind","firePageFocusEventAsync","type","tArray","Date","getTime","join","firePageFocusEvent","setupPageFocusTracking","on","prevType","data","fireCopyEvent","txt","setupCopyTracking","getSelection","toString","substring","scrollArea","inName","scrollNA","scrollBot","scrollThreeQuarter","scrollHalf","scrollQuarter","currScrollArea","scrollAreaList","setCurrScrollArea","inIndex","scrollBottomElement","scrollPageHeight","viewportBottom","refreshScrollPageDimVars","tBottom","getBoundingClientRect","top","pageYOffset","body","height","innerHeight","suppressMobileEvents","fireScrollEvent","inScrollValue","fireScrollEventSync","fireScrollEventAsync","fireScrollStopEvent","eventType","checkForNAScroll","innerWidth","alteredScrollState","checkTrueFalse","event","scrollStatus","each","hasOwnProperty","match","quarterCheckFire","halfCheckFire","threeQuarterCheckFire","tCurrPercent","scrollTimer","prevScrollPercent","scrollDirection","currScrollDirection","enable25on50Event","enable50on75event","processScroll","stopEvent","scrollResizeTimer","Math","round","trigger","setupScrollTracking","addEventListener","resize","getPerfTiming","performance","timing","navigationStart","keys","timeInfoArr","index","elapsed","isGlobalMetadataEnabled","meta","listMSMetadata","res","arr","i","enableWEDCS","varClickTracking","varCustomerTracking","varAutoFirePV","route","ctrl","getScript","ready","ex"],"mappings":"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","file":"2.2.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 867:\n/***/ function(module, exports, __webpack_require__) {\n\n\t!/* require */(/* empty */function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(866)]; (function ($) {\r\n\t    \"use strict\";\r\n\t\r\n\t    if (window.insight) {\r\n\t        console.error(\"insight.js is loaded more than once.\");\r\n\t        return;\r\n\t    }\r\n\t    var insight = {};\r\n\t    var customTags = {};\r\n\t    var customTagsCount = 0;\r\n\t    var customTagsBatchSize = 6;\r\n\t\r\n\t    insight.debugConsoleLogEnabled = false;\r\n\t    insight.debugLogMsgs = [];\r\n\t    insight.debugLog = function (inMsg) {\r\n\t        insight.debugLogMsgs.push(inMsg);\r\n\t        if (insight.debugConsoleLogEnabled) {\r\n\t            console.log(inMsg);\r\n\t        }\r\n\t    };\r\n\t    insight.getMetaTagContent = function (inMTName) {\r\n\t        try {\r\n\t            var myMTContent = $(\"meta[name='\" + inMTName + \"']\");\r\n\t            if (myMTContent && myMTContent.length > 0) {\r\n\t                myMTContent = myMTContent[myMTContent.length - 1].content;\r\n\t            } else {\r\n\t                myMTContent = null;\r\n\t            }\r\n\t            return myMTContent;\r\n\t        } catch (e) {\r\n\t            console.error(\"getMetaTagContent failed.\", e);\r\n\t            return null;\r\n\t        }\r\n\t    };\r\n\t    insight.setMetaTagContent = function (inMTName, inMTContent) {\r\n\t        if (!inMTContent) {\r\n\t            console.error(\"FALSE inMTContent found.\");\r\n\t            return;\r\n\t        }\r\n\t        if (insight.getMetaTagContent(inMTName) === null) {\r\n\t            var myMetaTag = document.createElement(\"meta\");\r\n\t            myMetaTag.name = inMTName;\r\n\t            myMetaTag.content = inMTContent;\r\n\t            document.getElementsByTagName(\"head\")[0].appendChild(myMetaTag);\r\n\t        } else {\r\n\t            $(\"meta[name='\" + inMTName + \"']\").attr(\"content\", inMTContent);\r\n\t        }\r\n\t    };\r\n\t    //Common function to fire custom event on clicked element\r\n\t    insight.processWEDCSCustomEventFromArray = function (inArray) {\r\n\t        if (typeof window.MscomCustomEvent !== \"function\") {\r\n\t            return;\r\n\t        } else if (!inArray || inArray.length === 0) {\r\n\t            window.MscomCustomEvent();\r\n\t            return;\r\n\t        }\r\n\t        window.MscomCustomEvent.apply(this, inArray);\r\n\t    };\r\n\t    ////////////////////// BATCH CUSTOM TAG PROCESSING\r\n\t    var wedcsLogTimer = 0;\r\n\t    insight.processAllCustomTags = function () {\r\n\t\r\n\t        customTagsCount = 0;\r\n\t        if (wedcsLogTimer) {\r\n\t            window.clearTimeout(wedcsLogTimer);\r\n\t            wedcsLogTimer = 0;\r\n\t        }\r\n\t\r\n\t        var array = [];\r\n\t        for (var key in customTags) {\r\n\t            if (customTags[key]) {\r\n\t                array.push(key, customTags[key]);\r\n\t                customTags[key] = undefined;\r\n\t            }\r\n\t        }\r\n\t        if (array.length > 0) {\r\n\t            insight.processWEDCSCustomEventFromArray(array);\r\n\t        }\r\n\t    };\r\n\t    // Value will be appended if the key already exists, split by \";\". So \";\" is not allowed in value.\r\n\t    insight.addNewCustomTag = function (key, value) {\r\n\t        if (customTags[key]) {\r\n\t            customTags[key] += \";\" + value;\r\n\t        } else {\r\n\t            customTags[key] = value;\r\n\t        }\r\n\t        customTagsCount++;\r\n\t        // Process immediately if there are customTagsBatchSize events\r\n\t        if (customTagsCount >= customTagsBatchSize) {\r\n\t            insight.processAllCustomTags();\r\n\t        } else if (!wedcsLogTimer) {\r\n\t            wedcsLogTimer = window.setTimeout(function () {\r\n\t                insight.processAllCustomTags();\r\n\t            }, 1000 * 20);\r\n\t        }\r\n\t    };\r\n\t    insight.setupUnloadTracking = function () {\r\n\t        $(window).bind(\"beforeunload\", function(){\r\n\t            insight.processAllCustomTags();\r\n\t        });\r\n\t    };\r\n\t    ////////////////////// FOCUS EVENT\r\n\t    insight.firePageFocusEventAsync = function (type) {\r\n\t        insight.debugLog(\"stepped inside firePageFocusEventAsync function\");\r\n\t        var tArray = [];\r\n\t        tArray.push(\"tp=\" + type);\r\n\t        tArray.push(\"dt=\" + new Date().getTime());\r\n\t        insight.addNewCustomTag(\"batch.focusevent\", tArray.join());\r\n\t    };\r\n\t    //TODO: The sync version need to be removed after backend jobs are updated\r\n\t    insight.firePageFocusEvent = function (type) {\r\n\t        insight.debugLog(\"stepped inside firePageFocusEvent function\");\r\n\t        var tArray = [];\r\n\t        tArray.push(\"ms.focuseventtime\", new Date().getTime());\r\n\t        tArray.push(\"ms.focusorblue\", type);\r\n\t        insight.processWEDCSCustomEventFromArray(tArray);\r\n\t\r\n\t        insight.firePageFocusEventAsync(type);\r\n\t    };\r\n\t    insight.setupPageFocusTracking = function () {\r\n\t\r\n\t        $(window).on(\"blur focus\", function (e) {\r\n\t            var prevType = $(this).data(\"prevType\");\r\n\t\r\n\t            if (prevType !== e.type) {   //reduce double fire issues\r\n\t                switch (e.type) {\r\n\t                    case \"blur\":\r\n\t                        insight.debugLog(\"Blured\");\r\n\t                        insight.firePageFocusEvent(\"Blured\");\r\n\t                        break;\r\n\t                    case \"focus\":\r\n\t                        insight.debugLog(\"Focused\");\r\n\t                        insight.firePageFocusEvent(\"Focused\");\r\n\t                        break;\r\n\t                }\r\n\t            }\r\n\t            $(this).data(\"prevType\", e.type);\r\n\t        });\r\n\t\r\n\t    };\r\n\t    ////////////////////// COPY EVENT\r\n\t    insight.fireCopyEvent = function (txt, length) {\r\n\t        insight.debugLog(\"stepped inside fireCopyEvent function\");\r\n\t        var tArray = [];\r\n\t        tArray.push(\"ms.copyeventtime\", new Date().getTime());\r\n\t        tArray.push(\"ms.copycontent\", txt);\r\n\t        tArray.push(\"ms.copycontentlength\", length);\r\n\t        insight.processWEDCSCustomEventFromArray(tArray);\r\n\t    };\r\n\t    insight.setupCopyTracking = function () {\r\n\t        $(window).bind(\"copy\", function (e) {\r\n\t            var txt = window.getSelection().toString();\r\n\t            var length = txt.length;\r\n\t            txt = txt.substring(0, 20); //truncate to limit the length of WEDCS event\r\n\t            insight.fireCopyEvent(txt, length);\r\n\t        });\r\n\t    };\r\n\t    ////////////////////// SCROLL TRACKING\r\n\t    //Scroll Area definition\r\n\t    insight.scrollArea = function (inName) {\r\n\t        try {\r\n\t            this.name = inName;\r\n\t            this.scrollNA = false;\r\n\t            this.scrollBot = false;\r\n\t            this.scrollThreeQuarter = false;\r\n\t            this.scrollHalf = false;\r\n\t            this.scrollQuarter = false;\r\n\t        } catch (e) {\r\n\t            console.error(\"Error in the scrollArea function. Error: \" + e);\r\n\t        }\r\n\t    };\r\n\t    //Track multiple scroll areas per page\r\n\t    insight.currScrollArea = null;\r\n\t    insight.scrollAreaList = [];\r\n\t    insight.setCurrScrollArea = function (inIndex) {\r\n\t        try {\r\n\t            if (typeof inIndex !== \"number\") {\r\n\t                return;\r\n\t            } else if (insight.scrollAreaList.length <= inIndex) {\r\n\t                return;\r\n\t            }\r\n\t            insight.currScrollArea = insight.scrollAreaList[inIndex];\r\n\t        } catch (e) {\r\n\t            console.error(\"Error in the setCurrScrollArea function. Error: \" + e);\r\n\t        }\r\n\t    };\r\n\t    //Page dimension variables\r\n\t    insight.scrollBottomElement = null;\r\n\t    insight.scrollPageHeight = -1;\r\n\t    insight.viewportBottom = -1;\r\n\t    insight.refreshScrollPageDimVars = function () {\r\n\t        try {\r\n\t            var tBottom = 0;\r\n\t            if (insight.scrollBottomElement) {\r\n\t                tBottom = insight.scrollBottomElement.getBoundingClientRect().top + window.pageYOffset;\r\n\t            }\r\n\t            if (tBottom <= 0) {\r\n\t                tBottom = document.body.getBoundingClientRect().height;\r\n\t            }\r\n\t            insight.scrollPageHeight = tBottom;\r\n\t            insight.viewportBottom = window.pageYOffset + window.innerHeight;\r\n\t        } catch (e) {\r\n\t            console.error(\"Error in the refreshScrollPageDimVars function. Error: \" + e);\r\n\t        }\r\n\t    };\r\n\t    insight.suppressMobileEvents = false;\r\n\t    insight.fireScrollEvent = function (inScrollValue) {\r\n\t        insight.fireScrollEventSync(inScrollValue, \"scroll\");\r\n\t        insight.fireScrollEventAsync(inScrollValue, \"scroll\");\r\n\t    };\r\n\t    insight.fireScrollStopEvent = function (inScrollValue) {\r\n\t        insight.fireScrollEventSync(inScrollValue, \"scroll-stop\");\r\n\t        insight.fireScrollEventAsync(inScrollValue, \"scroll-stop\");\r\n\t    };\r\n\t    insight.fireScrollEventAsync = function (inScrollValue, eventType) {\r\n\t        insight.debugLog(\"stepped inside fireScrollEventAsync function\");\r\n\t        var tArray = [];\r\n\t        tArray.push(\"scnum=scroll-\" + inScrollValue);\r\n\t        tArray.push(\"scn=\" + eventType);\r\n\t        tArray.push(\"dt=\" + new Date().getTime());\r\n\t        insight.addNewCustomTag(\"batch.scrollevent\", tArray.join());\r\n\t    };\r\n\t    insight.fireScrollEventSync = function (inScrollValue, eventType) {\r\n\t        insight.debugLog(\"stepped inside fireScrollEvent function\");\r\n\t        var tArray = [];\r\n\t        tArray.push(\"ms.pgarea\", \"body\");\r\n\t        tArray.push(\"ms.scnum\", \"scroll-\" + inScrollValue);\r\n\t        tArray.push(\"ms.interactiontype\", \"4\");\r\n\t        tArray.push(\"ms.scn\", eventType);\r\n\t        insight.processWEDCSCustomEventFromArray(tArray);\r\n\t    };\r\n\t    insight.checkForNAScroll = function () {\r\n\t        try {\r\n\t            insight.refreshScrollPageDimVars();\r\n\t            if (insight.scrollPageHeight <= 0) {\r\n\t                return;\r\n\t            } else if (insight.suppressMobileEvents && window.innerWidth <= 510) {\r\n\t                return;\r\n\t            }\r\n\t            if (window.innerHeight > insight.scrollPageHeight * 0.90) {\r\n\t                //Visitor can see the whole page, fire special -na event\r\n\t                insight.currScrollArea.scrollNA = true;\r\n\t                insight.fireScrollEvent(\"na\");\r\n\t            } else {\r\n\t                insight.fireScrollEvent(\"0%\");\r\n\t            }\r\n\t        } catch (e) {\r\n\t            console.error(\"Error in the checkForNAScroll function. Error: \" + e);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    var alteredScrollState;\r\n\t\r\n\t    insight.checkTrueFalse = function (key, value) {\r\n\t        try {\r\n\t            if (value) {\r\n\t                insight.scrollAreaList[0][key] = false;  //update the scroll benchmark value from true to false so events can fire again\r\n\t                return true;\r\n\t            } else {\r\n\t                return false;\r\n\t            }\r\n\t        } catch (e) {\r\n\t            console.error(\"Error in the checkTrueFalse function. Error: \" + e);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    $(window).on(\"scrollDirectionStatus\", function (event, scrollStatus) {\r\n\t        try {\r\n\t            $.each(insight.scrollAreaList[0], function (key, value) {\r\n\t                if (insight.scrollAreaList[0].hasOwnProperty(key)) {\r\n\t                    if (key.match(/scroll/i) && !key.match(/NA/)) {   //only benchmarks we want to alter; .25, .50, .75, and 1\r\n\t                        alteredScrollState = insight.checkTrueFalse(key, value);\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\t        } catch (e) {\r\n\t            console.error(\"Error in the scrollDirectionStatus listener function. Error: \" + e);\r\n\t        }\r\n\t    });\r\n\t\r\n\t    insight.quarterCheckFire = function () {\r\n\t        try {\r\n\t            if (!insight.currScrollArea.scrollQuarter) {\r\n\t                insight.currScrollArea.scrollQuarter = true;\r\n\t                insight.fireScrollEvent(\"25%\");\r\n\t            }\r\n\t        } catch (e) {\r\n\t            console.error(\"Error in the quarterCheckFire function. Error: \" + e);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    insight.halfCheckFire = function () {\r\n\t        try {\r\n\t            if (!insight.currScrollArea.scrollHalf) {\r\n\t                insight.currScrollArea.scrollHalf = true;\r\n\t                insight.fireScrollEvent(\"50%\");\r\n\t            }\r\n\t        } catch (e) {\r\n\t            console.error(\"Error in the halfCheckFire function. Error: \" + e);\r\n\t        }\r\n\t    };\r\n\t\r\n\t    insight.threeQuarterCheckFire = function () {\r\n\t        try {\r\n\t            if (!insight.currScrollArea.scrollThreeQuarter) {\r\n\t                insight.currScrollArea.scrollThreeQuarter = true;\r\n\t                insight.fireScrollEvent(\"75%\");\r\n\t            }\r\n\t        } catch (e) {\r\n\t            console.error(\"Error in the threeQuarterCheckFire function. Error: \" + e);\r\n\t        }\r\n\t    };\r\n\t    var scrollTimer = 0;\r\n\t    var prevScrollPercent = 0, scrollDirection = \"down\", currScrollDirection = \"down\", tCurrPercent;\r\n\t    var enable25on50Event = false;\r\n\t    var enable50on75event = false;\r\n\t    insight.processScroll = function (stopEvent) {\r\n\t        try {\r\n\t            if (!stopEvent) {\r\n\t                window.clearTimeout(scrollTimer);\r\n\t                scrollTimer = window.setTimeout(function () {\r\n\t                    insight.processScroll(true);\r\n\t                }, 1000 * 10);\r\n\t\r\n\t                window.clearTimeout(insight.scrollResizeTimer);\r\n\t            }\r\n\t\r\n\t            if (insight.currScrollArea === null) {\r\n\t                return;\r\n\t            }\r\n\t            insight.refreshScrollPageDimVars();\r\n\t            if (insight.scrollPageHeight <= 0) {\r\n\t                return;\r\n\t            } else if (insight.suppressMobileEvents && window.innerWidth <= 510) {\r\n\t                return;\r\n\t            }\r\n\t            //find current scroll percentage of the page\r\n\t            tCurrPercent = insight.viewportBottom / insight.scrollPageHeight;\r\n\t\r\n\t            if (stopEvent === true) {\r\n\t                if (tCurrPercent > 0.99) {\r\n\t                    tCurrPercent = 1.0;\r\n\t                }\r\n\t                insight.fireScrollStopEvent(Math.round(tCurrPercent * 100) + \"%\");\r\n\t                return;\r\n\t            }\r\n\t\r\n\t            //check for a non-scrollable page; fire scroll n/a if true\r\n\t            if (window.innerHeight > insight.scrollPageHeight * 0.90) {\r\n\t                //Visitor can see the whole page, fire special -na event\r\n\t                if (!insight.currScrollArea.scrollNA) {\r\n\t                    insight.currScrollArea.scrollNA = true;\r\n\t                    insight.fireScrollEvent(\"na\");\r\n\t                }\r\n\t                return;\r\n\t            }\r\n\t\r\n\t            //check for small page which would cut off 25% event\r\n\t            if ((window.innerHeight / insight.scrollPageHeight) > 0.50) {\r\n\t                enable25on50Event = true;\r\n\t            } else if ((window.innerHeight / insight.scrollPageHeight) > 0.75) {\r\n\t                enable50on75event = true;\r\n\t            }\r\n\t\r\n\t            //update the scroll direction based off of previous scroll percentage and current scroll percentage\r\n\t            scrollDirection = prevScrollPercent <= tCurrPercent ? \"down\" : \"up\";\r\n\t            //update the prevScrollPercent variable with the latest scroll percentage\r\n\t            prevScrollPercent = tCurrPercent;\r\n\t\r\n\t            try {\r\n\t                if (currScrollDirection !== scrollDirection) {\r\n\t                    //change all scroll benchmarks to false if they have already fired\r\n\t                    //we want to be able to capture the scroll benchmark event again if the user has changed scroll direction\r\n\t                    $(window).trigger(\"scrollDirectionStatus\", [\"changed\"]);\r\n\t                }\r\n\t\r\n\t                if (tCurrPercent > 0.99) {\r\n\t                    if (!insight.currScrollArea.scrollBot) {\r\n\t                        insight.currScrollArea.scrollBot = true;\r\n\t                        insight.fireScrollEvent(\"100%\");\r\n\t                    }\r\n\t                } else if (tCurrPercent > 0.75) {\r\n\t                    if (enable50on75event) {  //user on a small page that will never reach the 25% or 50% benchmark; send 25%, 50% event with 75% conditional\r\n\t                        if (scrollDirection === \"down\") { //maintain order for timestamp purposes\r\n\t                            insight.quarterCheckFire();\r\n\t                            insight.halfCheckFire();\r\n\t                            insight.threeQuarterCheckFire();\r\n\t                        } else {\r\n\t                            insight.threeQuarterCheckFire();\r\n\t                            insight.halfCheckFire();\r\n\t                            insight.quarterCheckFire();\r\n\t                        }\r\n\t                    } else {\r\n\t                        insight.threeQuarterCheckFire();\r\n\t                    }\r\n\t                } else if (tCurrPercent > 0.50) {\r\n\t                    if (enable25on50Event) {  //user on a small page that will never reach the 25% benchmark; send 25% event with 50% conditional\r\n\t                        if (scrollDirection === \"down\") { //maintain order for timestamp purposes\r\n\t                            insight.quarterCheckFire();\r\n\t                            insight.halfCheckFire();\r\n\t                        } else {\r\n\t                            insight.halfCheckFire();\r\n\t                            insight.quarterCheckFire();\r\n\t                        }\r\n\t                    } else {\r\n\t                        insight.halfCheckFire();\r\n\t                    }\r\n\t                } else if (tCurrPercent > 0.25) {\r\n\t                    insight.quarterCheckFire();\r\n\t                }\r\n\t            } catch (e) {\r\n\t                console.error(\"Error in the scroll benchmark conditionals. Raw error: \" + e);\r\n\t            }\r\n\t            currScrollDirection = scrollDirection;\r\n\t        } catch (e) {\r\n\t            console.error(\"Error in the processScroll function. Error: \" + e);\r\n\t        }\r\n\t    };\r\n\t    insight.scrollResizeTimer = 0;\r\n\t    insight.setupScrollTracking = function () {\r\n\t        try {\r\n\t            insight.scrollBottomElement = $(\"footer:first\")[0];\r\n\t            insight.scrollAreaList.push(new insight.scrollArea(\"body\"));\r\n\t            insight.setCurrScrollArea(0);\r\n\t            window.addEventListener(\"scroll\", function () {\r\n\t                insight.processScroll();\r\n\t            });\r\n\t            scrollTimer = window.setTimeout(function () {\r\n\t                insight.processScroll(true);\r\n\t            }, 1000 * 10);\r\n\t            //Note: resize also catches zoom in/out\r\n\t            $(window).resize(function () {\r\n\t                window.clearTimeout(insight.scrollResizeTimer);\r\n\t                insight.scrollResizeTimer = window.setTimeout(function () {\r\n\t                    insight.processScroll();\r\n\t                }, 500);\r\n\t            });\r\n\t            //fire 0% scroll or n/a scroll depending on window height\r\n\t            insight.checkForNAScroll();\r\n\t        } catch (e) {\r\n\t            console.error(\"Error in the setupScrollTracking function. Error: \" + e);\r\n\t        }\r\n\t    };\r\n\t    insight.getPerfTiming = function () {\r\n\t        if (!window.performance || !window.performance.timing) {\r\n\t            return null;\r\n\t        }\r\n\t        var navigationStart = window.performance.timing.navigationStart;\r\n\t        if (typeof navigationStart !== \"number\") {\r\n\t            return null;\r\n\t        }\r\n\t        //Navigation timing attributes, ref: https://w3c.github.io/navigation-timing/\r\n\t        var keys = [\"redirectStart\", \"redirectEnd\", \"fetchStart\", \"connectStart\", \"connectEnd\", \"requestStart\", \"responseStart\",\r\n\t                    \"responseEnd\", \"domLoading\", \"domInteractive\", \"domContentLoadedEventStart\", \"domContentLoadedEventEnd\",\r\n\t                    \"domComplete\", \"loadEventStart\", \"loadEventEnd\"];\r\n\t        var timeInfoArr = [];\r\n\t        for (var index = 0; index < keys.length; index++) {\r\n\t            var key = keys[index];\r\n\t            if (typeof window.performance.timing[key] !== \"number\") {\r\n\t                timeInfoArr.push(\"\");\r\n\t            } else {\r\n\t                var elapsed = window.performance.timing[key] !== 0 ? window.performance.timing[key] - navigationStart : \"\";\r\n\t                timeInfoArr.push(elapsed);\r\n\t            }\r\n\t        }\r\n\t        return timeInfoArr.join();\r\n\t    };\r\n\t    insight.isGlobalMetadataEnabled = function (meta) {\r\n\t        if (insight.getMetaTagContent(meta) !== null) {\r\n\t            return true;\r\n\t        }\r\n\t        return false;\r\n\t    };\r\n\t    insight.listMSMetadata = function () {\r\n\t        var res = [];\r\n\t        var arr = $(\"meta[name^='ms.']\");\r\n\t        for (var i = 0; i < arr.length; i++) {\r\n\t            res.push(arr[i].name);\r\n\t        }\r\n\t        return res.join(\", \");\r\n\t    };\r\n\t    insight.enableWEDCS = function () {\r\n\t        //WEDCS base settings\r\n\t        window.varClickTracking = 1;\r\n\t        window.varCustomerTracking = 0;\r\n\t        window.varAutoFirePV = 1;\r\n\t        window.route = \"\";\r\n\t        window.ctrl = \"\";\r\n\t\r\n\t        $.getScript(\"//i.s-microsoft.com/wedcs/ms.js\", function() {\r\n\t            insight.setupPageFocusTracking();\r\n\t            insight.setupScrollTracking();\r\n\t            insight.setupCopyTracking();\r\n\t            insight.setupUnloadTracking();\r\n\t        });\r\n\t    };\r\n\t\r\n\t    $(document).ready(function () {\r\n\t        try {\r\n\t            insight.enableWEDCS();\r\n\t        } catch (ex) {\r\n\t            console.error(ex.toString());\r\n\t        }\r\n\t    });\r\n\t    window.insight = insight;\r\n\t}.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}());\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 2.2.js\n **/","require([\"jquery\"], function ($) {\r\n    \"use strict\";\r\n\r\n    if (window.insight) {\r\n        console.error(\"insight.js is loaded more than once.\");\r\n        return;\r\n    }\r\n    var insight = {};\r\n    var customTags = {};\r\n    var customTagsCount = 0;\r\n    var customTagsBatchSize = 6;\r\n\r\n    insight.debugConsoleLogEnabled = false;\r\n    insight.debugLogMsgs = [];\r\n    insight.debugLog = function (inMsg) {\r\n        insight.debugLogMsgs.push(inMsg);\r\n        if (insight.debugConsoleLogEnabled) {\r\n            console.log(inMsg);\r\n        }\r\n    };\r\n    insight.getMetaTagContent = function (inMTName) {\r\n        try {\r\n            var myMTContent = $(\"meta[name='\" + inMTName + \"']\");\r\n            if (myMTContent && myMTContent.length > 0) {\r\n                myMTContent = myMTContent[myMTContent.length - 1].content;\r\n            } else {\r\n                myMTContent = null;\r\n            }\r\n            return myMTContent;\r\n        } catch (e) {\r\n            console.error(\"getMetaTagContent failed.\", e);\r\n            return null;\r\n        }\r\n    };\r\n    insight.setMetaTagContent = function (inMTName, inMTContent) {\r\n        if (!inMTContent) {\r\n            console.error(\"FALSE inMTContent found.\");\r\n            return;\r\n        }\r\n        if (insight.getMetaTagContent(inMTName) === null) {\r\n            var myMetaTag = document.createElement(\"meta\");\r\n            myMetaTag.name = inMTName;\r\n            myMetaTag.content = inMTContent;\r\n            document.getElementsByTagName(\"head\")[0].appendChild(myMetaTag);\r\n        } else {\r\n            $(\"meta[name='\" + inMTName + \"']\").attr(\"content\", inMTContent);\r\n        }\r\n    };\r\n    //Common function to fire custom event on clicked element\r\n    insight.processWEDCSCustomEventFromArray = function (inArray) {\r\n        if (typeof window.MscomCustomEvent !== \"function\") {\r\n            return;\r\n        } else if (!inArray || inArray.length === 0) {\r\n            window.MscomCustomEvent();\r\n            return;\r\n        }\r\n        window.MscomCustomEvent.apply(this, inArray);\r\n    };\r\n    ////////////////////// BATCH CUSTOM TAG PROCESSING\r\n    var wedcsLogTimer = 0;\r\n    insight.processAllCustomTags = function () {\r\n\r\n        customTagsCount = 0;\r\n        if (wedcsLogTimer) {\r\n            window.clearTimeout(wedcsLogTimer);\r\n            wedcsLogTimer = 0;\r\n        }\r\n\r\n        var array = [];\r\n        for (var key in customTags) {\r\n            if (customTags[key]) {\r\n                array.push(key, customTags[key]);\r\n                customTags[key] = undefined;\r\n            }\r\n        }\r\n        if (array.length > 0) {\r\n            insight.processWEDCSCustomEventFromArray(array);\r\n        }\r\n    };\r\n    // Value will be appended if the key already exists, split by \";\". So \";\" is not allowed in value.\r\n    insight.addNewCustomTag = function (key, value) {\r\n        if (customTags[key]) {\r\n            customTags[key] += \";\" + value;\r\n        } else {\r\n            customTags[key] = value;\r\n        }\r\n        customTagsCount++;\r\n        // Process immediately if there are customTagsBatchSize events\r\n        if (customTagsCount >= customTagsBatchSize) {\r\n            insight.processAllCustomTags();\r\n        } else if (!wedcsLogTimer) {\r\n            wedcsLogTimer = window.setTimeout(function () {\r\n                insight.processAllCustomTags();\r\n            }, 1000 * 20);\r\n        }\r\n    };\r\n    insight.setupUnloadTracking = function () {\r\n        $(window).bind(\"beforeunload\", function(){\r\n            insight.processAllCustomTags();\r\n        });\r\n    };\r\n    ////////////////////// FOCUS EVENT\r\n    insight.firePageFocusEventAsync = function (type) {\r\n        insight.debugLog(\"stepped inside firePageFocusEventAsync function\");\r\n        var tArray = [];\r\n        tArray.push(\"tp=\" + type);\r\n        tArray.push(\"dt=\" + new Date().getTime());\r\n        insight.addNewCustomTag(\"batch.focusevent\", tArray.join());\r\n    };\r\n    //TODO: The sync version need to be removed after backend jobs are updated\r\n    insight.firePageFocusEvent = function (type) {\r\n        insight.debugLog(\"stepped inside firePageFocusEvent function\");\r\n        var tArray = [];\r\n        tArray.push(\"ms.focuseventtime\", new Date().getTime());\r\n        tArray.push(\"ms.focusorblue\", type);\r\n        insight.processWEDCSCustomEventFromArray(tArray);\r\n\r\n        insight.firePageFocusEventAsync(type);\r\n    };\r\n    insight.setupPageFocusTracking = function () {\r\n\r\n        $(window).on(\"blur focus\", function (e) {\r\n            var prevType = $(this).data(\"prevType\");\r\n\r\n            if (prevType !== e.type) {   //reduce double fire issues\r\n                switch (e.type) {\r\n                    case \"blur\":\r\n                        insight.debugLog(\"Blured\");\r\n                        insight.firePageFocusEvent(\"Blured\");\r\n                        break;\r\n                    case \"focus\":\r\n                        insight.debugLog(\"Focused\");\r\n                        insight.firePageFocusEvent(\"Focused\");\r\n                        break;\r\n                }\r\n            }\r\n            $(this).data(\"prevType\", e.type);\r\n        });\r\n\r\n    };\r\n    ////////////////////// COPY EVENT\r\n    insight.fireCopyEvent = function (txt, length) {\r\n        insight.debugLog(\"stepped inside fireCopyEvent function\");\r\n        var tArray = [];\r\n        tArray.push(\"ms.copyeventtime\", new Date().getTime());\r\n        tArray.push(\"ms.copycontent\", txt);\r\n        tArray.push(\"ms.copycontentlength\", length);\r\n        insight.processWEDCSCustomEventFromArray(tArray);\r\n    };\r\n    insight.setupCopyTracking = function () {\r\n        $(window).bind(\"copy\", function (e) {\r\n            var txt = window.getSelection().toString();\r\n            var length = txt.length;\r\n            txt = txt.substring(0, 20); //truncate to limit the length of WEDCS event\r\n            insight.fireCopyEvent(txt, length);\r\n        });\r\n    };\r\n    ////////////////////// SCROLL TRACKING\r\n    //Scroll Area definition\r\n    insight.scrollArea = function (inName) {\r\n        try {\r\n            this.name = inName;\r\n            this.scrollNA = false;\r\n            this.scrollBot = false;\r\n            this.scrollThreeQuarter = false;\r\n            this.scrollHalf = false;\r\n            this.scrollQuarter = false;\r\n        } catch (e) {\r\n            console.error(\"Error in the scrollArea function. Error: \" + e);\r\n        }\r\n    };\r\n    //Track multiple scroll areas per page\r\n    insight.currScrollArea = null;\r\n    insight.scrollAreaList = [];\r\n    insight.setCurrScrollArea = function (inIndex) {\r\n        try {\r\n            if (typeof inIndex !== \"number\") {\r\n                return;\r\n            } else if (insight.scrollAreaList.length <= inIndex) {\r\n                return;\r\n            }\r\n            insight.currScrollArea = insight.scrollAreaList[inIndex];\r\n        } catch (e) {\r\n            console.error(\"Error in the setCurrScrollArea function. Error: \" + e);\r\n        }\r\n    };\r\n    //Page dimension variables\r\n    insight.scrollBottomElement = null;\r\n    insight.scrollPageHeight = -1;\r\n    insight.viewportBottom = -1;\r\n    insight.refreshScrollPageDimVars = function () {\r\n        try {\r\n            var tBottom = 0;\r\n            if (insight.scrollBottomElement) {\r\n                tBottom = insight.scrollBottomElement.getBoundingClientRect().top + window.pageYOffset;\r\n            }\r\n            if (tBottom <= 0) {\r\n                tBottom = document.body.getBoundingClientRect().height;\r\n            }\r\n            insight.scrollPageHeight = tBottom;\r\n            insight.viewportBottom = window.pageYOffset + window.innerHeight;\r\n        } catch (e) {\r\n            console.error(\"Error in the refreshScrollPageDimVars function. Error: \" + e);\r\n        }\r\n    };\r\n    insight.suppressMobileEvents = false;\r\n    insight.fireScrollEvent = function (inScrollValue) {\r\n        insight.fireScrollEventSync(inScrollValue, \"scroll\");\r\n        insight.fireScrollEventAsync(inScrollValue, \"scroll\");\r\n    };\r\n    insight.fireScrollStopEvent = function (inScrollValue) {\r\n        insight.fireScrollEventSync(inScrollValue, \"scroll-stop\");\r\n        insight.fireScrollEventAsync(inScrollValue, \"scroll-stop\");\r\n    };\r\n    insight.fireScrollEventAsync = function (inScrollValue, eventType) {\r\n        insight.debugLog(\"stepped inside fireScrollEventAsync function\");\r\n        var tArray = [];\r\n        tArray.push(\"scnum=scroll-\" + inScrollValue);\r\n        tArray.push(\"scn=\" + eventType);\r\n        tArray.push(\"dt=\" + new Date().getTime());\r\n        insight.addNewCustomTag(\"batch.scrollevent\", tArray.join());\r\n    };\r\n    insight.fireScrollEventSync = function (inScrollValue, eventType) {\r\n        insight.debugLog(\"stepped inside fireScrollEvent function\");\r\n        var tArray = [];\r\n        tArray.push(\"ms.pgarea\", \"body\");\r\n        tArray.push(\"ms.scnum\", \"scroll-\" + inScrollValue);\r\n        tArray.push(\"ms.interactiontype\", \"4\");\r\n        tArray.push(\"ms.scn\", eventType);\r\n        insight.processWEDCSCustomEventFromArray(tArray);\r\n    };\r\n    insight.checkForNAScroll = function () {\r\n        try {\r\n            insight.refreshScrollPageDimVars();\r\n            if (insight.scrollPageHeight <= 0) {\r\n                return;\r\n            } else if (insight.suppressMobileEvents && window.innerWidth <= 510) {\r\n                return;\r\n            }\r\n            if (window.innerHeight > insight.scrollPageHeight * 0.90) {\r\n                //Visitor can see the whole page, fire special -na event\r\n                insight.currScrollArea.scrollNA = true;\r\n                insight.fireScrollEvent(\"na\");\r\n            } else {\r\n                insight.fireScrollEvent(\"0%\");\r\n            }\r\n        } catch (e) {\r\n            console.error(\"Error in the checkForNAScroll function. Error: \" + e);\r\n        }\r\n    };\r\n\r\n    var alteredScrollState;\r\n\r\n    insight.checkTrueFalse = function (key, value) {\r\n        try {\r\n            if (value) {\r\n                insight.scrollAreaList[0][key] = false;  //update the scroll benchmark value from true to false so events can fire again\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } catch (e) {\r\n            console.error(\"Error in the checkTrueFalse function. Error: \" + e);\r\n        }\r\n    };\r\n\r\n    $(window).on(\"scrollDirectionStatus\", function (event, scrollStatus) {\r\n        try {\r\n            $.each(insight.scrollAreaList[0], function (key, value) {\r\n                if (insight.scrollAreaList[0].hasOwnProperty(key)) {\r\n                    if (key.match(/scroll/i) && !key.match(/NA/)) {   //only benchmarks we want to alter; .25, .50, .75, and 1\r\n                        alteredScrollState = insight.checkTrueFalse(key, value);\r\n                    }\r\n                }\r\n            });\r\n        } catch (e) {\r\n            console.error(\"Error in the scrollDirectionStatus listener function. Error: \" + e);\r\n        }\r\n    });\r\n\r\n    insight.quarterCheckFire = function () {\r\n        try {\r\n            if (!insight.currScrollArea.scrollQuarter) {\r\n                insight.currScrollArea.scrollQuarter = true;\r\n                insight.fireScrollEvent(\"25%\");\r\n            }\r\n        } catch (e) {\r\n            console.error(\"Error in the quarterCheckFire function. Error: \" + e);\r\n        }\r\n    };\r\n\r\n    insight.halfCheckFire = function () {\r\n        try {\r\n            if (!insight.currScrollArea.scrollHalf) {\r\n                insight.currScrollArea.scrollHalf = true;\r\n                insight.fireScrollEvent(\"50%\");\r\n            }\r\n        } catch (e) {\r\n            console.error(\"Error in the halfCheckFire function. Error: \" + e);\r\n        }\r\n    };\r\n\r\n    insight.threeQuarterCheckFire = function () {\r\n        try {\r\n            if (!insight.currScrollArea.scrollThreeQuarter) {\r\n                insight.currScrollArea.scrollThreeQuarter = true;\r\n                insight.fireScrollEvent(\"75%\");\r\n            }\r\n        } catch (e) {\r\n            console.error(\"Error in the threeQuarterCheckFire function. Error: \" + e);\r\n        }\r\n    };\r\n    var scrollTimer = 0;\r\n    var prevScrollPercent = 0, scrollDirection = \"down\", currScrollDirection = \"down\", tCurrPercent;\r\n    var enable25on50Event = false;\r\n    var enable50on75event = false;\r\n    insight.processScroll = function (stopEvent) {\r\n        try {\r\n            if (!stopEvent) {\r\n                window.clearTimeout(scrollTimer);\r\n                scrollTimer = window.setTimeout(function () {\r\n                    insight.processScroll(true);\r\n                }, 1000 * 10);\r\n\r\n                window.clearTimeout(insight.scrollResizeTimer);\r\n            }\r\n\r\n            if (insight.currScrollArea === null) {\r\n                return;\r\n            }\r\n            insight.refreshScrollPageDimVars();\r\n            if (insight.scrollPageHeight <= 0) {\r\n                return;\r\n            } else if (insight.suppressMobileEvents && window.innerWidth <= 510) {\r\n                return;\r\n            }\r\n            //find current scroll percentage of the page\r\n            tCurrPercent = insight.viewportBottom / insight.scrollPageHeight;\r\n\r\n            if (stopEvent === true) {\r\n                if (tCurrPercent > 0.99) {\r\n                    tCurrPercent = 1.0;\r\n                }\r\n                insight.fireScrollStopEvent(Math.round(tCurrPercent * 100) + \"%\");\r\n                return;\r\n            }\r\n\r\n            //check for a non-scrollable page; fire scroll n/a if true\r\n            if (window.innerHeight > insight.scrollPageHeight * 0.90) {\r\n                //Visitor can see the whole page, fire special -na event\r\n                if (!insight.currScrollArea.scrollNA) {\r\n                    insight.currScrollArea.scrollNA = true;\r\n                    insight.fireScrollEvent(\"na\");\r\n                }\r\n                return;\r\n            }\r\n\r\n            //check for small page which would cut off 25% event\r\n            if ((window.innerHeight / insight.scrollPageHeight) > 0.50) {\r\n                enable25on50Event = true;\r\n            } else if ((window.innerHeight / insight.scrollPageHeight) > 0.75) {\r\n                enable50on75event = true;\r\n            }\r\n\r\n            //update the scroll direction based off of previous scroll percentage and current scroll percentage\r\n            scrollDirection = prevScrollPercent <= tCurrPercent ? \"down\" : \"up\";\r\n            //update the prevScrollPercent variable with the latest scroll percentage\r\n            prevScrollPercent = tCurrPercent;\r\n\r\n            try {\r\n                if (currScrollDirection !== scrollDirection) {\r\n                    //change all scroll benchmarks to false if they have already fired\r\n                    //we want to be able to capture the scroll benchmark event again if the user has changed scroll direction\r\n                    $(window).trigger(\"scrollDirectionStatus\", [\"changed\"]);\r\n                }\r\n\r\n                if (tCurrPercent > 0.99) {\r\n                    if (!insight.currScrollArea.scrollBot) {\r\n                        insight.currScrollArea.scrollBot = true;\r\n                        insight.fireScrollEvent(\"100%\");\r\n                    }\r\n                } else if (tCurrPercent > 0.75) {\r\n                    if (enable50on75event) {  //user on a small page that will never reach the 25% or 50% benchmark; send 25%, 50% event with 75% conditional\r\n                        if (scrollDirection === \"down\") { //maintain order for timestamp purposes\r\n                            insight.quarterCheckFire();\r\n                            insight.halfCheckFire();\r\n                            insight.threeQuarterCheckFire();\r\n                        } else {\r\n                            insight.threeQuarterCheckFire();\r\n                            insight.halfCheckFire();\r\n                            insight.quarterCheckFire();\r\n                        }\r\n                    } else {\r\n                        insight.threeQuarterCheckFire();\r\n                    }\r\n                } else if (tCurrPercent > 0.50) {\r\n                    if (enable25on50Event) {  //user on a small page that will never reach the 25% benchmark; send 25% event with 50% conditional\r\n                        if (scrollDirection === \"down\") { //maintain order for timestamp purposes\r\n                            insight.quarterCheckFire();\r\n                            insight.halfCheckFire();\r\n                        } else {\r\n                            insight.halfCheckFire();\r\n                            insight.quarterCheckFire();\r\n                        }\r\n                    } else {\r\n                        insight.halfCheckFire();\r\n                    }\r\n                } else if (tCurrPercent > 0.25) {\r\n                    insight.quarterCheckFire();\r\n                }\r\n            } catch (e) {\r\n                console.error(\"Error in the scroll benchmark conditionals. Raw error: \" + e);\r\n            }\r\n            currScrollDirection = scrollDirection;\r\n        } catch (e) {\r\n            console.error(\"Error in the processScroll function. Error: \" + e);\r\n        }\r\n    };\r\n    insight.scrollResizeTimer = 0;\r\n    insight.setupScrollTracking = function () {\r\n        try {\r\n            insight.scrollBottomElement = $(\"footer:first\")[0];\r\n            insight.scrollAreaList.push(new insight.scrollArea(\"body\"));\r\n            insight.setCurrScrollArea(0);\r\n            window.addEventListener(\"scroll\", function () {\r\n                insight.processScroll();\r\n            });\r\n            scrollTimer = window.setTimeout(function () {\r\n                insight.processScroll(true);\r\n            }, 1000 * 10);\r\n            //Note: resize also catches zoom in/out\r\n            $(window).resize(function () {\r\n                window.clearTimeout(insight.scrollResizeTimer);\r\n                insight.scrollResizeTimer = window.setTimeout(function () {\r\n                    insight.processScroll();\r\n                }, 500);\r\n            });\r\n            //fire 0% scroll or n/a scroll depending on window height\r\n            insight.checkForNAScroll();\r\n        } catch (e) {\r\n            console.error(\"Error in the setupScrollTracking function. Error: \" + e);\r\n        }\r\n    };\r\n    insight.getPerfTiming = function () {\r\n        if (!window.performance || !window.performance.timing) {\r\n            return null;\r\n        }\r\n        var navigationStart = window.performance.timing.navigationStart;\r\n        if (typeof navigationStart !== \"number\") {\r\n            return null;\r\n        }\r\n        //Navigation timing attributes, ref: https://w3c.github.io/navigation-timing/\r\n        var keys = [\"redirectStart\", \"redirectEnd\", \"fetchStart\", \"connectStart\", \"connectEnd\", \"requestStart\", \"responseStart\",\r\n                    \"responseEnd\", \"domLoading\", \"domInteractive\", \"domContentLoadedEventStart\", \"domContentLoadedEventEnd\",\r\n                    \"domComplete\", \"loadEventStart\", \"loadEventEnd\"];\r\n        var timeInfoArr = [];\r\n        for (var index = 0; index < keys.length; index++) {\r\n            var key = keys[index];\r\n            if (typeof window.performance.timing[key] !== \"number\") {\r\n                timeInfoArr.push(\"\");\r\n            } else {\r\n                var elapsed = window.performance.timing[key] !== 0 ? window.performance.timing[key] - navigationStart : \"\";\r\n                timeInfoArr.push(elapsed);\r\n            }\r\n        }\r\n        return timeInfoArr.join();\r\n    };\r\n    insight.isGlobalMetadataEnabled = function (meta) {\r\n        if (insight.getMetaTagContent(meta) !== null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    insight.listMSMetadata = function () {\r\n        var res = [];\r\n        var arr = $(\"meta[name^='ms.']\");\r\n        for (var i = 0; i < arr.length; i++) {\r\n            res.push(arr[i].name);\r\n        }\r\n        return res.join(\", \");\r\n    };\r\n    insight.enableWEDCS = function () {\r\n        //WEDCS base settings\r\n        window.varClickTracking = 1;\r\n        window.varCustomerTracking = 0;\r\n        window.varAutoFirePV = 1;\r\n        window.route = \"\";\r\n        window.ctrl = \"\";\r\n\r\n        $.getScript(\"//i.s-microsoft.com/wedcs/ms.js\", function() {\r\n            insight.setupPageFocusTracking();\r\n            insight.setupScrollTracking();\r\n            insight.setupCopyTracking();\r\n            insight.setupUnloadTracking();\r\n        });\r\n    };\r\n\r\n    $(document).ready(function () {\r\n        try {\r\n            insight.enableWEDCS();\r\n        } catch (ex) {\r\n            console.error(ex.toString());\r\n        }\r\n    });\r\n    window.insight = insight;\r\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/insightmsdn/insight.js\n ** module id = 867\n ** module chunks = 2\n **/"],"sourceRoot":""}